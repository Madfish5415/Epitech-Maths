#!/usr/bin/python3

import math
import sys


def to_int(arg):
    try:
        return int(arg)
    except ValueError:
        exit(84)


def to_float(arg):
    try:
        return float(arg)
    except ValueError:
        exit(84)


def display_help():
    print(
        "USAGE" "\n"
        "\t" "./102architect x y transfo1 arg11 [arg12] [transfo2 arg12 [arg22]] ..." "\n"
        "\n"
        "DESCRIPTION" "\n"
        "\t" "x" "\t" "abscissa of the original point" "\n"
        "\t" "y" "\t" "ordinate of the original point" "\n"
        "\n"
        "\t" "transfo arg1 [arg2]" "\n"
        "\t" "-t i j" "\t" "translation along vector (i, j)" "\n"
        "\t" "-z m n" "\t" "scaling by factors m (x-axis) and n (y-axis)" "\n"
        "\t" "-r d" "\t" "rotation centered in 0 by a d degree angle" "\n"
        "\t" "-s d" "\t" "reflection over the axis passing through 0 with an inclination" "\n"
        "\t" "\t" "angle of d degrees"
    )


def error_manager():
    if len(sys.argv) < 2:
        exit(84)
    elif (len(sys.argv) == 2) and (sys.argv[1] != "-h"):
        exit(84)


def is_flag_valid(flag, index, nbr):
    if (index + nbr) > len(sys.argv):
        return 0
    if sys.argv[index] != flag:
        return 0
    return 1


def create_matrix(rows, cols):
    matrix = [[0.0 for j in range(cols)] for i in range(rows)]

    return matrix


def create_unit_matrix(rows, cols):
    matrix = create_matrix(rows, cols)

    for i in range(rows):
        matrix[i][i] = 1.0
    return matrix


def mul_matrix_to_another(matrix_dest, matrix_src):
    result = create_matrix(3, 3)

    for i in range(3):
        for j in range(3):
            for k in range(3):
                result[i][j] += matrix_dest[k][j] * matrix_src[i][k]
    return result


def run():
    matrix = create_unit_matrix(3, 3)
    index = 3

    if len(sys.argv) < 4:
        exit(84)
    x = to_int(sys.argv[1])
    y = to_int(sys.argv[2])
    while index < len(sys.argv):
        if index >= len(sys.argv):
            return 0
        if is_flag_valid("-t", index, 3):
            matrix_t = create_unit_matrix(3, 3)

            matrix_t[0][2] = to_float(sys.argv[index + 1])
            matrix_t[1][2] = to_float(sys.argv[index + 2])

            matrix = mul_matrix_to_another(matrix, matrix_t)
            index += 3
        elif is_flag_valid("-z", index, 3):
            matrix_z = create_unit_matrix(3, 3)

            matrix_z[0][0] = to_float(sys.argv[index + 1])
            matrix_z[1][1] = to_float(sys.argv[index + 2])

            matrix = mul_matrix_to_another(matrix, matrix_z)
            index += 3
        elif is_flag_valid("-r", index, 2):
            matrix_r = create_unit_matrix(3, 3)

            angle = (to_int(sys.argv[index + 1]) / 180) * math.pi

            matrix_r[0][0] = math.cos(angle)
            matrix_r[1][1] = math.cos(angle)
            matrix_r[0][1] = - math.sin(angle)
            matrix_r[1][0] = math.sin(angle)

            matrix = mul_matrix_to_another(matrix, matrix_r)
            index += 2
        elif is_flag_valid("-s", index, 2):
            matrix_s = create_unit_matrix(3, 3)

            angle = (to_int(sys.argv[index + 1]) / 180) * math.pi

            matrix_s[0][0] = math.cos(2 * angle)
            matrix_s[1][1] = - math.cos(2 * angle)
            matrix_s[0][1] = math.sin(2 * angle)
            matrix_s[1][0] = math.sin(2 * angle)

            matrix = mul_matrix_to_another(matrix, matrix_s)
            index += 2
        else:
            exit(84)

    index = 3
    while index < len(sys.argv):
        if index >= len(sys.argv):
            return 0
        if sys.argv[index] == "-t":
            print("Translation along vector ({}, {})"
                  .format(sys.argv[index + 1], sys.argv[index + 2]))
            index += 3
        elif sys.argv[index] == "-z":
            print("Scaling by factors {} and {}"
                  .format(sys.argv[index + 1], sys.argv[index + 2]))
            index += 3
        elif sys.argv[index] == "-r":
            print("Rotation by a {} degree angle"
                  .format(sys.argv[index + 1]))
            index += 2
        elif sys.argv[index] == "-s":
            print("Reflection over an axis with an inclination angle of {} degrees"
                  .format(sys.argv[index + 1]))
            index += 2

    result_x = x * matrix[0][0] + y * matrix[0][1] + matrix[0][2]
    result_y = x * matrix[1][0] + y * matrix[1][1] + matrix[1][2]

    for i in range(0, 3):
        for j in range(0, 3):
            matrix[i][j] = round(matrix[i][j] * 100) / 100
    
    result_x = round(result_x * 100) / 100
    result_y = round(result_y * 100) / 100

    print("{0:.2f} \t {1:.2f} \t {2:.2f}".format(matrix[0][0], matrix[0][1], matrix[0][2]))
    print("{0:.2f} \t {1:.2f} \t {2:.2f}".format(matrix[1][0], matrix[1][1], matrix[1][2]))
    print("{0:.2f} \t {1:.2f} \t {2:.2f}".format(matrix[2][0], matrix[2][1], matrix[2][2]))
    print("({0}, {1}) => ({2:.2f}, {3:.2f})".format(x, y, result_x, result_y))


def main():
    error_manager()

    if sys.argv[1] == "-h":
        display_help()
    else:
        run()


if __name__ == '__main__':
    main()
