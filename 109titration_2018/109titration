#!/usr/bin/python3

import math
import sys
import os


def to_int(arg):
    try:
        return int(arg)
    except ValueError:
        exit(84)


def to_float(arg):
    try:
        return float(arg)
    except ValueError:
        exit(84)


def frange(start, end=None, inc=None):
    if end is None:
        end = start + 0.0
        start = 0.0
    if inc is None:
        inc = 1.0
    result = []
    while 1:
        next = start + len(result) * inc
        if inc > 0 and next >= end:
            break
        elif inc < 0 and next <= end:
            break
        result.append(next)
    return result


def error_manager():
    if len(sys.argv) != 2:
        exit(84)
    if sys.argv[1] != "-h":
        exists = os.path.isfile(sys.argv[1])
        if not exists:
            exit(84)
        if get_line_nb == 0:
            exit(84)
    return 0


def display_help():
    if sys.argv[1] == "-h":
        print(
            "USAGE" "\n"
            "\t" "./109titration file" "\n"
            "\n"
            "DESCRIPTION" "\n"
            "\t" "file" "\t" "a csv file containing \"vol;ph\" lines"
        )
        return 1
    return 0


def get_line_nb():
    fichier = open(sys.argv[1], "r")
    line_nb = 0
    for _ in fichier:
        line_nb += 1
    fichier.close()
    return line_nb


def get_file():
    line_nb = get_line_nb()
    if line_nb == 0:
        exit(84)
    tab = [[0 for col in range(2)] for row in range(line_nb)]
    line_nb = 0
    fichier = open(sys.argv[1],"r")
    for line in fichier:
        if any(char not in '0123456789;.\n' for char in line):
            exit(84)
        tmp = line.split(';')
        if (len(tmp) == 1):
            exit(84)
        tmp[1] = tmp[1].rstrip('\n')
        tab[line_nb][0] = to_float(tmp[0])
        tab[line_nb][1] = to_float(tmp[1])
        line_nb += 1
    tab.sort()
    fichier.close()
    return tab


def deriv(x0, y0, x2, y2):
    if (x2 - x0) == 0:
        exit(84)
    result = (y2 - y0) / (x2 - x0)
    return result


def run():
    max_d = 0
    vol = 0
    tab = get_file()
    d_tab = [[0] * len(tab[0]) for row in range(len(tab)-2)]
    dd_tab = [[0] * len(tab[0]) for row in range(3)]
    print("Derivative:")
    for x in range(1, len(tab)-1):
        d = deriv(tab[x-1][0], tab[x-1][1], tab[x+1][0], tab[x+1][1])
        if d > max_d:
            max_d = d
            vol = tab[x][0]
        print("{0:.1f} ml -> {1:.2f}".format(tab[x][0], d))
        d_tab[x-1][0] = to_float(tab[x][0])
        d_tab[x-1][1] = to_float(d)
    print("\nEquivalent point at {0:.1f} ml".format(vol))
    print("\nSecond derivative:")
    for x in range(1, len(d_tab)-1):
        d = deriv(d_tab[x-1][0], d_tab[x-1][1], d_tab[x+1][0], d_tab[x+1][1])
        if d_tab[x + 1][0] == vol:
            dd_tab[0][0] = to_float(d_tab[x][0])
            dd_tab[0][1] = to_float(d)
        if d_tab[x][0] == vol:
            dd_tab[1][0] = to_float(d_tab[x][0])
            dd_tab[1][1] = to_float(d)
        if d_tab[x - 1][0] == vol:
            dd_tab[2][0] = to_float(d_tab[x][0])
            dd_tab[2][1] = to_float(d)
        print("{0:.1f} ml -> {1:.2f}".format(d_tab[x][0], d))
    print("\nSecond derivative estimated:")
    vol = 0
    if (dd_tab[0][0] != 0 and dd_tab[1][0] != 0 and dd_tab[2][0] != 0):
        print("{0:.1f} ml -> {1:.2f}".format(dd_tab[0][0], dd_tab[0][1]))
        max_d = 100000000
        for x in frange(dd_tab[0][0] + 0.1, dd_tab[1][0], 0.1):
            if dd_tab[1][0]-dd_tab[0][0] == 0:
                exit(84)
            y = ((x - dd_tab[0][0])/(dd_tab[1][0]-dd_tab[0][0])) * dd_tab[1][1] + ((dd_tab[1][0] - x)/(dd_tab[1][0]-dd_tab[0][0])) * dd_tab[0][1]
            if abs(y) < abs(max_d):
                max_d = y
                vol = x
            print("{0:.1f} ml -> {1:.2f}".format(x, y))
        print("{0:.1f} ml -> {1:.2f}".format(dd_tab[1][0], dd_tab[1][1]))
        for x in frange(dd_tab[1][0] + 0.1, dd_tab[2][0], 0.1):
            if (dd_tab[2][0]-dd_tab[1][0] == 0):
                exit(84)
            y = ((x - dd_tab[1][0]) / (dd_tab[2][0] - dd_tab[1][0])) * dd_tab[2][1] + ((dd_tab[2][0] - x) / (dd_tab[2][0] - dd_tab[1][0])) * dd_tab[1][1]
            if abs(y) < abs(max_d):
                max_d = y
                vol = x
            print("{0:.1f} ml -> {1:.2f}".format(x, y))
        print("{0:.1f} ml -> {1:.2f}".format(dd_tab[2][0], dd_tab[2][1]))
    print("\nEquivalent point at {0:.1f} ml".format(vol))


def main():
    error_manager()
    if not display_help():
        run()
    return 0


if __name__ == '__main__':
    main()
