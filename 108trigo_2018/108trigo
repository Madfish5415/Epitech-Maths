#!/usr/bin/python3

import math
import sys


def to_int(arg):
    try:
        return int(arg)
    except ValueError:
        exit(84)


def is_square(number):
    root = int(math.sqrt(number) + 0.5)

    if number == pow(root, 2):
        return 1
    return 0


def is_function(string):
    functions = ["EXP", "COS", "SIN", "COSH", "SINH"]

    for function in functions:
        if string == function:
            return 1
    return 0


def matrix_create(size):
    matrix = [[0] * size for _ in range(size)]

    return matrix


def matrix_fill(matrix, size):
    for i in range(size):
        for j in range(size):
            matrix[i][j] = to_int(sys.argv[(i * size) + j + 2])

def matrix_add(matrix_a, matrix_b):
    size = len(matrix_a)
    matrix_c = [[0 for col in range(len(matrix_b[0]))] for row in range(len(matrix_a))]
    for i in range(0, size):
        for j in range(0, size):
            matrix_c[i][j] = matrix_a[i][j] + matrix_b[i][j]
    return matrix_c

def matrix_sub(matrix_a, matrix_b):
    size = len(matrix_a)
    matrix_c = [[0 for col in range(len(matrix_b[0]))] for row in range(len(matrix_a))]
    for i in range(0, size):
        for j in range(0, size):
            matrix_c[i][j] = matrix_a[i][j] - matrix_b[i][j]
    return matrix_c

def matrix_mul(matrix_a, matrix_b):
    matrix_c = [[0 for col in range(len(matrix_b[0]))] for row in range(len(matrix_a))]
    for i in range(0, len(matrix_a)):
        for j in range(0, len(matrix_b[0])):
            for k in range(0, len(matrix_a[0])):
                matrix_c[i][j] += matrix_a[i][k] * matrix_b[k][j]
    return matrix_c

def create_unit_matrix(size):
    matrix = [[0 for col in range(size)] for row in range(size)]
    for i in range(0, size):
        matrix[i][i] = 1
    return matrix

def matrix_pow(matrix_a, number):
    matrix_result = create_unit_matrix(len(matrix_a))
    for i in range(0, number):
        matrix_result = matrix_mul(matrix_result, matrix_a)
    return matrix_result

def matrix_div(matrix_a, number):
    matrix_b = matrix_a
    for i in range(0, len(matrix_a)):
        for j in range(0, len(matrix_a[0])):
            matrix_b[i][j] = matrix_a[i][j] / number
    return matrix_b

def factorial(n):
    x=1
    for i in range(2,n+1):
        x*=i
    return int(x)

def error_manager():
    argc = len(sys.argv)
    square = argc - 2

    if argc < 2:
        exit(84)
    if argc == 2:
        if sys.argv[1] != "-h":
            exit(84)
    else:
        if not is_square(square):
            exit(84)
        if not is_function(sys.argv[1]):
            exit(84)


def display_help():
    if sys.argv[1] == "-h":
        print(
            "USAGE" "\n"
            "\t" "./108trigo fun a0 a1 a2 ..." "\n"
            "\n"
            "DESCRIPTION" "\n"
            "\t" "fun" "\t" "function to be applied, among at least \"EXP\", \"COS\", \"SIN\", \"COSH\"" "\n"
            "\t" "\t" "and \"SINH\"" "\n"
            "\t" "ai" "\t" "coeficients of the matrix" "\n"
        )
        exit(0)


def EXP(matrix):
    matrix_result = matrix_create(len(matrix))
    matrix_tmp = matrix
    for i in range(0, 200):
        matrix_result = matrix_add(matrix_result, matrix_div(matrix_pow(matrix_tmp, i), factorial(i)))
        matrix_tmp = matrix
    return matrix_result

def COS(matrix):
    matrix_result = matrix_create(len(matrix))
    matrix_tmp = matrix
    for i in range(0, 200, 4):
        matrix_result = matrix_add(matrix_result, matrix_div(matrix_pow(matrix_tmp, i), factorial(i)))
        matrix_result = matrix_sub(matrix_result, matrix_div(matrix_pow(matrix_tmp, i+2), factorial(i+2)))
    return matrix_result

def SIN(matrix):
    matrix_result = matrix_create(len(matrix))
    matrix_tmp = matrix
    for i in range(1, 200, 4):
        matrix_result = matrix_add(matrix_result, matrix_div(matrix_pow(matrix_tmp, i), factorial(i)))
        matrix_result = matrix_sub(matrix_result, matrix_div(matrix_pow(matrix_tmp, i+2), factorial(i+2)))
    return matrix_result

def COSH(matrix):
    matrix_result = matrix_create(len(matrix))
    matrix_tmp = matrix
    for i in range(0, 200, 2):
        matrix_result = matrix_add(matrix_result, matrix_div(matrix_pow(matrix_tmp, i), factorial(i)))
    return matrix_result

def SINH(matrix):
    matrix_result = matrix_create(len(matrix))
    matrix_tmp = matrix
    for i in range(1, 200, 2):
        matrix_result = matrix_add(matrix_result, matrix_div(matrix_pow(matrix_tmp, i), factorial(i)))
    return matrix_result

def run():
    digits = len(sys.argv) - 2
    size = int(math.sqrt(digits) + 0.5)
    matrix = matrix_create(size)
    matrix_fill(matrix, size)

    if sys.argv[1] == "EXP":
        matrix = EXP(matrix)
    if sys.argv[1] == "COS":
        matrix = COS(matrix)
    if sys.argv[1] == "SIN":
        matrix = SIN(matrix)
    if sys.argv[1] == "COSH":
        matrix = COSH(matrix)
    if sys.argv[1] == "SINH":
        matrix = SINH(matrix)
    for i in range(0, len(matrix)):
        for j in range(0, len(matrix[0])):
            print("{0:.2f}".format(matrix[i][j]), end='')
            if (j % len(matrix)) != (len(matrix[0]) - 1):
                print("\t", end='')
        print()

def main():
    error_manager()
    display_help()
    run()


if __name__ == '__main__':
    main()
