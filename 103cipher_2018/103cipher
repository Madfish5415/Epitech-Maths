#!/usr/bin/python3

import math
import sys


def beautify_float(value):
    value = float(round(value, 3) + 0.0)

    return value


def error_manager():
    if len(sys.argv) == 2:
        if sys.argv[1] != "-h":
            exit(84)
    elif len(sys.argv) != 4:
        exit(84)
    if sys.argv[3] != "0" and sys.argv[3] != "1":
        exit(84)
    for index in range(1, 3):
        for i in range(0, len(sys.argv[index])):
            tmp = ord(sys.argv[index][i])
            if (tmp < 0) or (tmp > 127):
                exit(84)


def display_help():
    print(
        "USAGE" "\n"
        "\t" "./103cipher message key flag" "\n"
        "\n"
        "DESCRIPTION" "\n"
        "\t" "message" "\t\t" "a message, made of ASCII characters" "\n"
        "\t" "key" "\t\t" "the encryption key, made of ASCII characters" "\n"
        "\t" "flag" "\t\t" "0 for the message to be encrypted, 1 to be decrypted" "\n"
    )


def fill_key_matrix():
    size = math.ceil(math.sqrt(len(sys.argv[2])))
    key_matrix = [[0] * size for _ in range(size)]

    for i in range(0, len(sys.argv[2])):
        key_matrix[int(i / size)][i % size] = ord(sys.argv[2][i])
    return key_matrix


def fill_msg_matrix(key_matrix):
    k = 0
    rows = len(key_matrix)
    cols = math.ceil(len(sys.argv[1]) / rows)
    msg_matrix = [[0] * cols for _ in range(rows)]

    for j in range(cols):
        for i in range(rows):
            if k < len(sys.argv[1]):
                msg_matrix[i][j] = ord(sys.argv[1][k])
            k += 1
    return msg_matrix


def fill_msg_nbr_matrix(key_matrix, msg_matrix):
    k = 0
    cols = len(key_matrix)
    rows = math.ceil(len(msg_matrix) / cols)
    msg_nbr_matrix = [[0] * cols for _ in range(rows)]

    for i in range(rows):
        for j in range(cols):
            if k < len(msg_matrix):
                msg_nbr_matrix[i][j] = int(msg_matrix[k])
            k += 1
    return msg_nbr_matrix


def get_key_submatrix(key_matrix, i, j):
    k = 0
    m = 0
    size = len(key_matrix)
    submatrix = [[0] * (size - 1) for _ in range(size - 1)]

    for row in range(size):
        if row != i:
            for col in range(size):
                if col != j:
                    submatrix[k][m] = key_matrix[row][col]
                    m += 1
            m = 0
            k += 1
    return submatrix


def get_key_matrix_determinant(key_matrix):
    determinant = 0.0
    size = len(key_matrix)

    if size == 1:
        return key_matrix[0][0]
    if size == 2:
        determinant += (key_matrix[0][0] * key_matrix[1][1])
        determinant -= (key_matrix[0][1] * key_matrix[1][0])
    else:
        for i in range(size):
            determinant += (math.pow(-1, i) * key_matrix[0][i]) *\
                           get_key_matrix_determinant(get_key_submatrix(key_matrix, 0, i))
    return determinant


def get_key_comatrix(key_matrix):
    size = len(key_matrix)
    comatrix = [[0] * size for _ in range(size)]

    for i in range(size):
        for j in range(size):
            comatrix[i][j] = pow(-1, i + j) * get_key_matrix_determinant(get_key_submatrix(key_matrix, i, j))
    return comatrix


def get_key_transpose(key_matrix):
    size = len(key_matrix)
    transpose = [[0] * size for _ in range(size)]

    for i in range(size):
        for j in range(size):
            transpose[j][i] = key_matrix[i][j]
    return transpose


def get_key_matrix_inverse(key_matrix):
    size = len(key_matrix)
    determinant = get_key_matrix_determinant(key_matrix)
    transpose = get_key_transpose(get_key_comatrix(key_matrix))
    inverted_matrix = [[0.0] * size for _ in range(size)]

    if determinant == 0:
        exit(84)
    if size == 1:
        inverted_matrix = [[1 / determinant]]
    elif size == 2:
        inverted_matrix = [
            [key_matrix[1][1] / determinant, (key_matrix[0][1] / determinant) * -1],
            [(key_matrix[1][0] / determinant) * -1, key_matrix[0][0] / determinant]
        ]
    else:
        for i in range(size):
            for j in range(size):
                inverted_matrix[i][j] = (1 / determinant) * transpose[i][j]
    return inverted_matrix


def run_encrypt():
    key_matrix = fill_key_matrix()
    msg_matrix = fill_msg_matrix(key_matrix)
    key_rows = len(key_matrix)
    key_cols = key_rows
    msg_rows = len(msg_matrix)
    msg_cols = math.ceil(len(sys.argv[1]) / msg_rows)
    result = 0

    print("Key matrix:")
    for i in range(0, key_rows):
        for j in range(0, key_cols):
            print(key_matrix[i][j], end='')
            if (j % key_cols) != (key_cols - 1):
                print("\t", end='')
        print("")
    print("")

    print("Encrypted message:")
    for i in range(0, msg_cols):
        for j in range(0, key_rows):
            for k in range(0, key_cols):
                result += key_matrix[k][j] * msg_matrix[k][i]
            print(result, end='')
            if not ((i == msg_cols - 1) and (j == key_cols - 1)):
                print(" ", end='')
            result = 0
    print("")


def run_decrypt():
    key_matrix = fill_key_matrix()
    key_matrix = get_key_matrix_inverse(key_matrix)
    msg_matrix = sys.argv[1].split(" ")
    msg_matrix = fill_msg_nbr_matrix(key_matrix, msg_matrix)
    msg_rows = len(msg_matrix)
    key_rows = len(key_matrix)
    key_cols = len(key_matrix[0])
    result = 0

    print("Key matrix:")
    for i in range(0, key_rows):
        for j in range(0, key_cols):
            print("{}".format(beautify_float(key_matrix[i][j])), end='')
            if (j % key_cols) != (key_cols - 1):
                print("\t", end='')
        print("")
    print("")

    print("Decrypted message:")
    for i in range(msg_rows):
        for j in range(key_cols):
            for k in range(key_rows):
                result += msg_matrix[i][k] * key_matrix[k][j]
            result = int(round(result))
            if 32 <= result <= 126:
                print(chr(result), end='')
            result = 0
    print("")


def run():
    if sys.argv[3] == "0":
        run_encrypt()
    if sys.argv[3] == "1":
        run_decrypt()


def main():
    error_manager()
    if sys.argv[1] == "-h":
        display_help()
    else:
        run()


if __name__ == '__main__':
    main()
